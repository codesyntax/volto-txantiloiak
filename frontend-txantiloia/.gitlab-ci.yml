stages:
  - mergerequest
  - build
  - publish

mergerequest:
  image: node:14-alpine
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

  before_script:
    - apk add --no-cache git openssh
    - eval `ssh-agent -s`
    - echo "${VOLTO_DEPLOY_SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null # add ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global user.name "${CI_GITLAB_USERNAME}"
    - git config --global user.email "${CI_GITLAB_USER_EMAIL}"
    - export CI_PUSH_REPO=$(echo "$CI_REPOSITORY_URL" | sed -e "s|.*@\(.*\)|git@\1|" -e "s|/|:/|" )
    - git remote set-url --push origin "ssh://${CI_PUSH_REPO}"
    - git checkout -B $CI_BUILD_REF_NAME
    - git pull origin $CI_BUILD_REF_NAME
    - git push origin -u $CI_BUILD_REF_NAME
    - 'echo "//${CODESYNTAX_NPM_REPO_URL}:_authToken=${CODESYNTAX_REPO_NPM_TOKEN}" > .npmrc'
    - 'echo "always-auth=true" >> .npmrc'
    - 'echo "registry \"https://${CODESYNTAX_NPM_REPO_URL}\"" > .yarnrc'
    - cp jsconfig.json jsconfig.bak
    - cp jsconfig.json.prod jsconfig.json
  script:
    - yarn
    - yarn i18n:ci
    - yarn build

  artifacts:
    name: "mr-build"
    paths:
      - build

build:
  image: node:14-alpine
  stage: build
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"

  before_script:
    - apk add --no-cache git openssh
    - eval `ssh-agent -s`
    - echo "${VOLTO_DEPLOY_SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null # add ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global user.name "${CI_GITLAB_USERNAME}"
    - git config --global user.email "${CI_GITLAB_USER_EMAIL}"
    - export CI_PUSH_REPO=$(echo "$CI_REPOSITORY_URL" | sed -e "s|.*@\(.*\)|git@\1|" -e "s|/|:/|" )
    - git remote set-url --push origin "ssh://${CI_PUSH_REPO}"
    - git checkout -B $CI_BUILD_REF_NAME
    - git pull origin $CI_BUILD_REF_NAME
    - git push origin -u $CI_BUILD_REF_NAME
    - 'echo "//${CODESYNTAX_NPM_REPO_URL}:_authToken=${CODESYNTAX_REPO_NPM_TOKEN}" > .npmrc'
    - 'echo "always-auth=true" >> .npmrc'
    - 'echo "registry \"https://${CODESYNTAX_NPM_REPO_URL}\"" > .yarnrc'
    - yarn global add release-it
    - cp jsconfig.json jsconfig.bak
    - cp jsconfig.json.prod jsconfig.json
  script:
    - yarn
    - yarn build
    - cp jsconfig.bak jsconfig.json
    - git checkout -- .yarnrc yarn.lock
    - git status
    - release-it --ci --minor --npm.skipChecks
    - git checkout develop
    - git pull origin main
    - git push origin -u develop
  artifacts:
    paths:
      - build
      - node_modules

publish:
  image: alpine
  stage: publish
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"

  before_script:
    - apk add --no-cache rsync curl
    - mkdir -p ~/.ssh
    - touch ~/.ssh/known_hosts
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - "which ssh-agent || ( apk add --update openssh )"
    - eval `ssh-agent -s`
    - echo "${VOLTO_DEPLOY_SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null # add ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  script:
    - scp -P22 -r build/* $SSH_SERVER_USER@$SSH_SERVER_NAME:$SSH_SERVER_BUILDOUT_PATH/frontend/build/
    - rsync -av node_modules $SSH_SERVER_USER@$SSH_SERVER_NAME:$SSH_SERVER_BUILDOUT_PATH/frontend/
    - ssh -T $SSH_SERVER_USER@$SSH_SERVER_NAME "$SSH_SERVER_BUILDOUT_PATH/bin/supervisorctl restart $VOLTO_SUPERVISOR_NAME"
  after_script:
    - export BEFORE_LAST_TAG=$(git for-each-ref --sort=creatordate --format '%(refname)' refs/tags | sed 's/refs\/tags\///' | tail -2 | head -1)
    - export LAST_TAG_COMMITS=$(git log $BEFORE_LAST_TAG.. --format=format:"- %an %h %s" | sed ':a;N;$!ba;s/\n/<br \/>/g')
    - export LAST_TAG=$(git for-each-ref --sort=creatordate --format '%(refname)' refs/tags | sed 's/refs\/tags\///' | tail -1)
    - export MESSAGE=$(echo "{\"Messages\":[{\"From\":{\"Email\":\"sysadmin@codesyntax.com\",\"Name\":\"Sysadmin Gitlab\"}, \"To\":[{\"Email\":\"$VOLTO_RELEASE_EMAIL_TO\"}],\"Subject\":\"Eguneraketa ${CI_PROJECT_TITLE} v${LAST_TAG}\", \"TextPart\":\"Release-a burutu da ${LAST_TAG} bertsioarekin.\", \"HTMLPart\":\"<h2>Aldaketak</h2><p>${LAST_TAG_COMMITS}</p>\"}]}")
    - "curl -s -X POST  --user \"$MJ_APIKEY_PUBLIC:$MJ_APIKEY_PRIVATE\"  \"https://api.mailjet.com/v3.1/send\"
      -H \"Content-Type: application/json\"
      -d \"$MESSAGE\""
